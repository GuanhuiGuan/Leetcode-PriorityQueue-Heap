
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        Queue<Map.Entry<Integer, Integer>> heap = new PriorityQueue<>((a, b)->(b.getValue() - a.getValue()));
        List<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < nums.length; i++){//map to count occurrence
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            //update the element; if empty, default count is 0, and we plus 1
            //else if not empty, get the value and add one
        }
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            heap.add(entry);//maxheap to find max
        }
        for(int i = 0; i < k; i++){
            Map.Entry<Integer, Integer> entry = heap.poll();
            list.add(entry.getKey());
        }
        return list;
    }
}
